From eb9bcd703e83c394f55dd87e05862e3f4305e156 Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Sun, 17 May 2015 16:03:06 -0400
Subject: [PATCH] Adapt Nemo to deal with problem situations with the user
 thumbnail cache: - Added --fix-cache command line option (must be run as
 root) - Added quick check at startup to detect major problems and disable
 thumbnailing   until fixed. - Individual thumbnailed files are checked on the
 fly for permission issues. - When a problem is detected, an infobar appears,
 offering to fix the problem, or   ignore it.

Requires: linuxmint/cinnamon-desktop@59f0108

Fixes #777
Revert reason: requires linuxmint/cinnamon-desktop@59f0108
reverted:
--- b/libnemo-private/nemo-file-private.h
+++ a/libnemo-private/nemo-file-private.h
@@ -101,7 +101,6 @@
 	GIcon *icon;
 	
 	char *thumbnail_path;
-    eel_boolean_bit thumbnail_access_problem : 1;
 	GdkPixbuf *thumbnail;
 	time_t thumbnail_mtime;
     gint thumbnail_throttle_count;
 
reverted:
--- b/libnemo-private/nemo-file.c
+++ a/libnemo-private/nemo-file.c
@@ -67,7 +67,6 @@
 #include <time.h>
 #include <unistd.h>
 #include <sys/stat.h>
-#include <errno.h>
 
 #ifdef HAVE_SELINUX
 #include <selinux/selinux.h>
@@ -2138,18 +2137,6 @@
 static int show_image_thumbs;
 
 static gboolean
-access_ok (const gchar *path)
-{
-    if (g_access (path, R_OK|W_OK) != 0) {
-        if (errno != ENOENT && errno != EFAULT) {
-            return FALSE;
-        }
-    }
-
-    return TRUE;
-}
-
-static gboolean
 update_info_internal (NemoFile *file,
 		      GFileInfo *info,
 		      gboolean update_name)
@@ -2192,8 +2179,6 @@
 
 	file->details->file_info_is_up_to_date = TRUE;
 
-    file->details->thumbnail_access_problem = FALSE;
-
 	/* FIXME bugzilla.gnome.org 42044: Need to let links that
 	 * point to the old name know that the file has been renamed.
 	 */
@@ -2486,13 +2471,7 @@
 	if (g_strcmp0 (file->details->thumbnail_path, thumbnail_path) != 0) {
 		changed = TRUE;
 		g_free (file->details->thumbnail_path);
-
-        if (show_image_thumbs != NEMO_SPEED_TRADEOFF_NEVER && thumbnail_path != NULL && !access_ok (thumbnail_path)) {
-            file->details->thumbnail_access_problem = TRUE;
-            file->details->thumbnail_path = NULL;
-        } else {
-            file->details->thumbnail_path = g_strdup (thumbnail_path);
-        }
+        file->details->thumbnail_path = g_strdup (thumbnail_path);
 	}
 
 	thumbnailing_failed =  g_file_info_get_attribute_boolean (info, G_FILE_ATTRIBUTE_THUMBNAILING_FAILED);
@@ -4100,9 +4079,6 @@
 	    nemo_file_get_size (file) > cached_thumbnail_limit) {
 		return FALSE;
 	}
-
-    if (file->details->thumbnail_access_problem)
-        return FALSE;
 
 	if (show_image_thumbs == NEMO_SPEED_TRADEOFF_ALWAYS) {
 		if (use_preview == G_FILESYSTEM_PREVIEW_TYPE_NEVER) {
@@ -7632,12 +7608,6 @@
     file->details->is_desktop_orphan = is_desktop_orphan;
 }
 
-gboolean
-nemo_file_has_thumbnail_access_problem   (NemoFile *file)
-{
-    return file->details->thumbnail_access_problem;
-}
-
 static void
 invalidate_directory_count (NemoFile *file)
 {
reverted:
--- b/libnemo-private/nemo-file.h
+++ a/libnemo-private/nemo-file.h
@@ -493,8 +493,6 @@
 
 gchar *  nemo_file_construct_tooltip              (NemoFile *file, NemoFileTooltipFlags flags);
 
-gboolean nemo_file_has_thumbnail_access_problem   (NemoFile *file);
-
 gint     nemo_file_get_monitor_number             (NemoFile *file);
 void     nemo_file_set_monitor_number             (NemoFile *file, gint monitor);
 void     nemo_file_get_position                   (NemoFile *file, GdkPoint *point);

reverted:
--- b/libnemo-private/nemo-thumbnails.c
+++ a/libnemo-private/nemo-thumbnails.c
@@ -738,9 +738,3 @@
 				 g_strdup (info->image_uri), NULL);
 	}
 }
-
-gboolean
-nemo_thumbnail_factory_check_status (void)
-{
-    return gnome_desktop_thumbnail_cache_check_permissions (get_thumbnail_factory (), TRUE);
-}
reverted:
--- b/libnemo-private/nemo-thumbnails.h
+++ a/libnemo-private/nemo-thumbnails.h
@@ -43,6 +43,4 @@
 void       nemo_thumbnail_remove_from_queue     (const char   *file_uri);
 void       nemo_thumbnail_prioritize            (const char   *file_uri);
 
-gboolean   nemo_thumbnail_factory_check_status          (void);
-
 #endif /* NEMO_THUMBNAILS_H */
reverted:
--- b/src/Makefile.am
+++ a/src/Makefile.am
@@ -167,8 +167,6 @@
 	nemo-self-check-functions.h 	\
     nemo-statusbar.c    \
     nemo-statusbar.h    \
-    nemo-thumbnail-problem-bar.c  \
-    nemo-thumbnail-problem-bar.h  \
 	nemo-toolbar.c			\
 	nemo-toolbar.h			\
 	nemo-tree-sidebar.c			\
@@ -306,8 +304,6 @@
     nemo-self-check-functions.h     \
     nemo-statusbar.c    \
     nemo-statusbar.h    \
-    nemo-thumbnail-problem-bar.c  \
-    nemo-thumbnail-problem-bar.h  \
     nemo-toolbar.c          \
     nemo-toolbar.h          \
     nemo-tree-sidebar.c         \
reverted:
--- b/src/nemo-application.c
+++ a/src/nemo-application.c
@@ -66,9 +66,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <pwd.h>
 #include <fcntl.h>
-#include <errno.h>
 #include <glib/gstdio.h>
 #include <glib/gi18n.h>
 #include <gio/gio.h>
@@ -77,7 +75,6 @@
 #include <libnotify/notify.h>
 
 #define GNOME_DESKTOP_USE_UNSTABLE_API
-#include <libcinnamon-desktop/gnome-desktop-thumbnail.h>
 
 #define NEMO_ACCEL_MAP_SAVE_DELAY 30
 
@@ -85,9 +82,6 @@
 
 struct _NemoApplicationPriv {
 	NemoProgressUIHandler *progress_handler;
-
-    gboolean cache_problem;
-    gboolean ignore_cache_problem;
 };
 
 static NemoApplication *singleton = NULL;
@@ -424,20 +424,6 @@
 	/* Initialize the UI handler singleton for file operations */
 	notify_init (GETTEXT_PACKAGE);
 	self->priv->progress_handler = nemo_progress_ui_handler_new ();
-
-    self->priv->cache_problem = FALSE;
-    self->priv->ignore_cache_problem = FALSE;
-
-    /* silently do a full check of the cache and fix if running as root.
-     * If running as a normal user, do a quick check, and we'll notify the
-     * user later if there's a problem via an infobar */
-    if (geteuid () == 0) {
-        if (!gnome_desktop_thumbnail_cache_check_permissions (NULL, FALSE))
-            gnome_desktop_thumbnail_cache_fix_permissions ();
-    } else {
-        if (!gnome_desktop_thumbnail_cache_check_permissions (NULL, TRUE))
-            self->priv->cache_problem = TRUE;
-    }
 }
 
 static void
@@ -545,39 +525,3 @@
 {
     return singleton;
 }
-
-void
-nemo_application_check_thumbnail_cache (NemoApplication *application)
-{
-    application->priv->cache_problem = !nemo_thumbnail_factory_check_status ();
-}
-
-gboolean
-nemo_application_get_cache_bad (NemoApplication *application)
-{
-    return application->priv->cache_problem;
-}
-
-void
-nemo_application_clear_cache_flag (NemoApplication *application)
-{
-    application->priv->cache_problem = FALSE;
-}
-
-void
-nemo_application_set_cache_flag (NemoApplication *application)
-{
-    application->priv->cache_problem = TRUE;
-}
-
-void
-nemo_application_ignore_cache_problem (NemoApplication *application)
-{
-    application->priv->ignore_cache_problem = TRUE;
-}
-
-gboolean
-nemo_application_get_cache_problem_ignored (NemoApplication *application)
-{
-    return application->priv->ignore_cache_problem;
-}
reverted:
--- b/src/nemo-application.h
+++ a/src/nemo-application.h
@@ -95,12 +95,6 @@
                                                const gchar *message);
 gboolean nemo_application_check_required_directory (NemoApplication *application,
                                                     gchar           *path);
-void nemo_application_check_thumbnail_cache (NemoApplication *application);
-gboolean nemo_application_get_cache_bad (NemoApplication *application);
-void nemo_application_clear_cache_flag (NemoApplication *application);
-void nemo_application_set_cache_flag (NemoApplication *application);
-void nemo_application_ignore_cache_problem (NemoApplication *application);
-gboolean nemo_application_get_cache_problem_ignored (NemoApplication *application);
 gboolean nemo_application_get_show_desktop (NemoApplication *application);
 
 #endif /* __NEMO_APPLICATION_H__ */
reverted:
--- b/src/nemo-icon-view.c
+++ a/src/nemo-icon-view.c
@@ -497,11 +497,6 @@
         return;
     }
 
-    if (nemo_file_has_thumbnail_access_problem (file)) {
-        nemo_application_set_cache_flag (nemo_application_get_singleton ());
-        nemo_window_slot_check_bad_cache_bar (nemo_view_get_nemo_window_slot (view));
-    }
-
 	/* Reset scroll region for the first icon added when loading a directory. */
 	if (nemo_view_get_loading (view) && nemo_icon_container_is_empty (icon_container)) {
 		nemo_icon_container_reset_scroll_region (icon_container);
reverted:
--- b/src/nemo-interesting-folder-bar.c
+++ a/src/nemo-interesting-folder-bar.c
@@ -41,7 +40,7 @@
 
 enum {
     INTERESTING_FOLDER_BAR_ACTION_OPEN_DOC = 1,
+	INTERESTING_FOLDER_BAR_SCRIPT_OPEN_DOC
-    INTERESTING_FOLDER_BAR_SCRIPT_OPEN_DOC
 };
 
 struct NemoInterestingFolderBarPrivate
reverted:
--- b/src/nemo-list-view.c
+++ a/src/nemo-list-view.c
@@ -2132,11 +2131,6 @@
 {
 	NemoListModel *model;
 
-    if (nemo_file_has_thumbnail_access_problem (file)) {
-        nemo_application_set_cache_flag (nemo_application_get_singleton ());
-        nemo_window_slot_check_bad_cache_bar (nemo_view_get_nemo_window_slot (view));
-    }
-
 	model = NEMO_LIST_VIEW (view)->details->model;
 	nemo_list_model_add_file (model, file, directory);
 }
reverted:
--- b/src/nemo-thumbnail-problem-bar.c
+++ /dev/null
@@ -1,169 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA 02110-1335, USA.
- *
- */
-
-#include "config.h"
-
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "nemo-thumbnail-problem-bar.h"
-#include "nemo-application.h"
-
-#include "nemo-view.h"
-#include <libnemo-private/nemo-file.h>
-
-#define NEMO_THUMBNAIL_PROBLEM_BAR_GET_PRIVATE(o)\
-	(G_TYPE_INSTANCE_GET_PRIVATE ((o), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR, NemoThumbnailProblemBarPrivate))
-
-enum {
-	PROP_VIEW = 1,
-	NUM_PROPERTIES
-};
-
-enum {
-    FIX_CACHE = 1,
-    DISMISS
-};
-
-struct NemoThumbnailProblemBarPrivate
-{
-	NemoView *view;
-	gulong selection_handler_id;
-};
-
-G_DEFINE_TYPE (NemoThumbnailProblemBar, nemo_thumbnail_problem_bar, GTK_TYPE_INFO_BAR);
-
-static void
-thumbnail_problem_bar_response_cb (GtkInfoBar *infobar,
-                                          gint  response_id,
-                                      gpointer  user_data)
-{
-    NemoThumbnailProblemBar *bar;
-
-    bar = NEMO_THUMBNAIL_PROBLEM_BAR (infobar);
-
-    switch (response_id) {
-        case FIX_CACHE:
-            g_spawn_command_line_sync ("sh -c \"pkexec nemo --fix-cache\"", NULL, NULL, NULL, NULL);
-            nemo_application_check_thumbnail_cache (nemo_application_get_singleton ());
-            nemo_window_slot_queue_reload (nemo_view_get_nemo_window_slot (bar->priv->view));
-            nemo_window_slot_check_bad_cache_bar (nemo_view_get_nemo_window_slot (bar->priv->view));
-            break;
-        case DISMISS:
-            nemo_application_clear_cache_flag (nemo_application_get_singleton ());
-            nemo_application_ignore_cache_problem (nemo_application_get_singleton ());
-            gtk_widget_hide (GTK_WIDGET (infobar));
-            break;
-        default:
-            break;
-    }
-}
-
-static void
-nemo_thumbnail_problem_bar_set_property (GObject      *object,
-				 guint         prop_id,
-				 const GValue *value,
-				 GParamSpec   *pspec)
-{
-	NemoThumbnailProblemBar *bar;
-
-	bar = NEMO_THUMBNAIL_PROBLEM_BAR (object);
-
-	switch (prop_id) {
-    	case PROP_VIEW:
-    		bar->priv->view = g_value_get_object (value);
-    		break;
-    	default:
-    		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-    		break;
-    }
-}
-
-static void
-nemo_thumbnail_problem_bar_constructed (GObject *obj)
-{
-    G_OBJECT_CLASS (nemo_thumbnail_problem_bar_parent_class)->constructed (obj);
-
-    NemoThumbnailProblemBar *bar = NEMO_THUMBNAIL_PROBLEM_BAR (obj);
-
-    GtkWidget *content_area, *action_area;
-    G_GNUC_UNUSED GtkWidget *w;
-    GtkWidget *label;
-
-    content_area = gtk_info_bar_get_content_area (GTK_INFO_BAR (bar));
-    action_area = gtk_info_bar_get_action_area (GTK_INFO_BAR (bar));
-
-    gtk_orientable_set_orientation (GTK_ORIENTABLE (action_area),
-                                    GTK_ORIENTATION_HORIZONTAL);
-
-    label = gtk_label_new (_("A problem has been detected with your thumbnail cache.  Fixing it will require administrative privileges."));
-
-    /* w is useless - this method creates the widget and adds/refs it to the info bar at the same time */
-    w = gtk_info_bar_add_button (GTK_INFO_BAR (bar),
-                                 _("Fix now"),
-                                 FIX_CACHE);
-    w = gtk_info_bar_add_button (GTK_INFO_BAR (bar),
-                                 _("Dismiss"),
-                                 DISMISS);
-
-    gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);
-    gtk_style_context_add_class (gtk_widget_get_style_context (label),
-                     "nemo-cluebar-label");
-    gtk_widget_show (label);
-    gtk_container_add (GTK_CONTAINER (content_area), label);
-
-    g_signal_connect (bar, "response",
-              G_CALLBACK (thumbnail_problem_bar_response_cb), bar);
-}
-
-static void
-nemo_thumbnail_problem_bar_class_init (NemoThumbnailProblemBarClass *klass)
-{
-	GObjectClass *object_class;
-
-	object_class = G_OBJECT_CLASS (klass);
-
-	object_class->set_property = nemo_thumbnail_problem_bar_set_property;
-    object_class->constructed = nemo_thumbnail_problem_bar_constructed;
-
-	g_object_class_install_property (object_class,
-					 PROP_VIEW,
-					 g_param_spec_object ("view",
-							      "view",
-							      "the NemoView",
-							      NEMO_TYPE_VIEW,
-							      G_PARAM_WRITABLE |
-							      G_PARAM_CONSTRUCT_ONLY |
-							      G_PARAM_STATIC_STRINGS));
-
-	g_type_class_add_private (klass, sizeof (NemoThumbnailProblemBarPrivate));
-}
-
-static void
-nemo_thumbnail_problem_bar_init (NemoThumbnailProblemBar *bar)
-{
-    bar->priv = NEMO_THUMBNAIL_PROBLEM_BAR_GET_PRIVATE (bar);
-}
-
-GtkWidget *
-nemo_thumbnail_problem_bar_new (NemoView *view)
-{
-return g_object_new (NEMO_TYPE_THUMBNAIL_PROBLEM_BAR,
-                     "view", view,
-                     NULL);
-}
reverted:
--- b/src/nemo-thumbnail-problem-bar.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
-/*
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street - Suite 500, Boston, MA 02110-1335, USA.
- *
- */
-
-#ifndef __NEMO_THUMBNAIL_PROBLEM_BAR_H
-#define __NEMO_THUMBNAIL_PROBLEM_BAR_H
-
-#include "nemo-view.h"
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-#define NEMO_TYPE_THUMBNAIL_PROBLEM_BAR         (nemo_thumbnail_problem_bar_get_type ())
-#define NEMO_THUMBNAIL_PROBLEM_BAR(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR, NemoThumbnailProblemBar))
-#define NEMO_THUMBNAIL_PROBLEM_BAR_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR, NemoThumbnailProblemBarClass))
-#define NEMO_IS_THUMBNAIL_PROBLEM_BAR(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR))
-#define NEMO_IS_THUMBNAIL_PROBLEM_BAR_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR))
-#define NEMO_THUMBNAIL_PROBLEM_BAR_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), NEMO_TYPE_THUMBNAIL_PROBLEM_BAR, NemoThumbnailProblemBarClass))
-
-typedef struct NemoThumbnailProblemBarPrivate NemoThumbnailProblemBarPrivate;
-
-typedef struct
-{
-	GtkInfoBar parent;
-
-	NemoThumbnailProblemBarPrivate *priv;
-} NemoThumbnailProblemBar;
-
-typedef struct
-{
-	GtkInfoBarClass parent_class;
-} NemoThumbnailProblemBarClass;
-
-GType		 nemo_thumbnail_problem_bar_get_type	(void) G_GNUC_CONST;
-GtkWidget       *nemo_thumbnail_problem_bar_new         (NemoView *view);
-
-G_END_DECLS
-
-#endif /* __NEMO_THUMBNAIL_PROBLEM_BAR_H */
reverted:
--- b/src/nemo-window-manage-views.c
+++ a/src/nemo-window-manage-views.c
@@ -39,7 +39,6 @@
 #include "nemo-view-factory.h"
 #include "nemo-x-content-bar.h"
 #include "nemo-interesting-folder-bar.h"
-#include "nemo-thumbnail-problem-bar.h"
 #include <eel/eel-accessibility.h>
 #include <eel/eel-debug.h>
 #include <eel/eel-glib-extensions.h>
@@ -1459,8 +1458,6 @@
 		}
 
         maybe_show_interesting_folder_bar (slot);
-
-        nemo_window_slot_check_bad_cache_bar (slot);
 
 		/* need the mount to determine if we should put up the x-content cluebar */
 		if (slot->find_mount_cancellable != NULL) {
@@ -1907,28 +1904,3 @@
 
 	nemo_window_slot_force_reload (slot);
 }
-
-void
-nemo_window_slot_check_bad_cache_bar (NemoWindowSlot *slot)
-{
-    if (NEMO_IS_DESKTOP_WINDOW (nemo_window_slot_get_window (slot)))
-        return;
-
-    if (nemo_application_get_cache_bad (nemo_application_get_singleton ()) &&
-        !nemo_application_get_cache_problem_ignored (nemo_application_get_singleton ())) {
-        if (slot->cache_bar != NULL) {
-            gtk_widget_show (slot->cache_bar);
-        } else {
-            GtkWidget *bad_bar = nemo_thumbnail_problem_bar_new (nemo_window_slot_get_current_view (slot));
-            if (bad_bar) {
-                gtk_widget_show (bad_bar);
-                nemo_window_slot_add_extra_location_widget (slot, bad_bar);
-                slot->cache_bar = bad_bar;
-            }
-        }
-    } else {
-        if (slot->cache_bar != NULL) {
-            gtk_widget_hide (slot->cache_bar);
-        }
-    }
-}
reverted:
--- b/src/nemo-window-slot.h
+++ a/src/nemo-window-slot.h
@@ -72,7 +72,6 @@
 
 	GtkWidget *view_overlay;
 	GtkWidget *floating_bar;
-    GtkWidget *cache_bar;
 
 	guint set_status_timeout_id;
 	guint loading_timeout_id;
@@ -193,6 +192,4 @@
 void nemo_window_slot_clear_forward_list (NemoWindowSlot *slot);
 void nemo_window_slot_clear_back_list    (NemoWindowSlot *slot);
 
-void nemo_window_slot_check_bad_cache_bar (NemoWindowSlot *slot);
-
 #endif /* NEMO_WINDOW_SLOT_H */
reverted:
--- b/src/nemo-bookmark-list.c
+++ a/src/nemo-bookmark-list.c
@@ -32,7 +32,6 @@
 #include <libnemo-private/nemo-file.h>
 #include <libnemo-private/nemo-icon-names.h>
 #define GNOME_DESKTOP_USE_UNSTABLE_API
-#include <libcinnamon-desktop/gnome-desktop-utils.h>
 
 #include <gio/gio.h>
 #include <string.h>
@@ -60,25 +59,6 @@
 static void        nemo_bookmark_list_save_file     (NemoBookmarkList *bookmarks);
 
 G_DEFINE_TYPE(NemoBookmarkList, nemo_bookmark_list, G_TYPE_OBJECT);
-
-static void
-ensure_proper_file_permissions (GFile *file)
-{
-    if (geteuid () == 0) {
-        struct passwd *pwent;
-        pwent = gnome_desktop_get_session_user_pwent ();
-
-        gchar *path = g_file_get_path (file);
-
-        if (g_strcmp0 (pwent->pw_dir, g_get_home_dir ()) == 0) {
-            G_GNUC_UNUSED int res;
-
-            res = chown (path, pwent->pw_uid, pwent->pw_gid);
-        }
-
-        g_free (path);
-    }
-}
 
 static NemoBookmark *
 new_bookmark_from_uri (const char *uri, const char *label, NemoBookmarkMetadata *md)
@@ -885,15 +885,6 @@
         nemo_bookmark_metadata_free (data);
     }
 
-    if (g_key_file_save_to_file (kfile,
-                                 filename,
-                                 &error)) {
-        ensure_proper_file_permissions (file);
-    } else {
-        g_warning ("Could not save bookmark metadata file: %s\n", error->message);
-        g_error_free (error);
-    }
-
     g_free (filename);
     g_key_file_free (kfile);
     g_object_unref (file);
@@ -979,7 +950,6 @@
                                  NULL,
                                  NULL,
                                  &error)) {
-        ensure_proper_file_permissions (file);
         g_task_return_boolean (task, TRUE);
     } else {
         g_task_return_error (task, error);

--- a/src/nemo-main-application.c
+++ b/src/nemo-main-application.c
@@ -491,7 +491,6 @@
 	gboolean kill_shell = FALSE;
 	gboolean no_default_window = FALSE;
     gboolean no_desktop_ignored = FALSE;
-	gboolean fix_cache = FALSE;
 	gchar **remaining = NULL;
     GApplicationFlags init_flags;
 	NemoMainApplication *self = NEMO_MAIN_APPLICATION (application);
@@ -512,8 +512,6 @@
 		  N_("Only create windows for explicitly specified URIs."), NULL },
         { "no-desktop", '\0', 0, G_OPTION_ARG_NONE, &no_desktop_ignored,
           N_("Ignored argument - left for compatibility only."), NULL },
-		{ "fix-cache", '\0', 0, G_OPTION_ARG_NONE, &fix_cache,
-		  N_("Repair the user thumbnail cache - this can be useful if you're having trouble with file thumbnails.  Must be run as root"), NULL },
 		{ "quit", 'q', 0, G_OPTION_ARG_NONE, &kill_shell, 
 		  N_("Quit Nemo."), NULL },
 		{ G_OPTION_REMAINING, 0, 0, G_OPTION_ARG_STRING_ARRAY, &remaining, NULL,  N_("[URI...]") },
@@ -553,17 +550,6 @@
 		do_perform_self_checks (exit_status);
 		goto out;
 	}
-
-    if (fix_cache) {
-        if (geteuid () != 0) {
-            g_printerr ("The --fix-cache option must be run with sudo or as the root user.\n");
-        } else {
-            gnome_desktop_thumbnail_cache_fix_permissions ();
-            g_print ("User thumbnail cache successfully repaired.\n");
-        }
-
-        goto out;
-    }
 
 	DEBUG ("Parsing local command line, no_default_window %d, quit %d, "
 	       "self checks %d",
--- a/nemo.pot
+++ b/nemo.pot
@@ -1740,20 +1740,6 @@
 msgid "Adjust zoom level"
 msgstr ""
 
-#: src/nemo-thumbnail-problem-bar.c:114
-msgid ""
-"A problem has been detected with your thumbnail cache.  Fixing it will "
-"require administrative privileges."
-msgstr ""
-
-#: src/nemo-thumbnail-problem-bar.c:118
-msgid "Fix now"
-msgstr ""
-
-#: src/nemo-thumbnail-problem-bar.c:121
-msgid "Dismiss"
-msgstr ""
-
 #: src/nemo-toolbar.c:238
 msgid "Elevated Privileges"
 msgstr ""

--- a/src/nemo-window-slot.c
+++ b/src/nemo-window-slot.c
@@ -294,8 +294,6 @@
 	g_signal_connect (slot->floating_bar, "action",
 			  G_CALLBACK (floating_bar_action_cb), slot);
 
-    slot->cache_bar = NULL;
-
 	slot->title = g_strdup (_("Loading..."));
 }
 
